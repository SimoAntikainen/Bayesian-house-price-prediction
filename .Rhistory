my_2 <- mean(data2)
sigma2_2  <- rsinvchisq(ns, n_2-1, s2_2)
mu_2 <- my_2 + sqrt(sigma2_2/n_2)*rnorm(length(sigma2_2))
return(unname(quantile((mu_1-mu_2), probs = c((1-prob)/2, (1+prob)/2) )))
}
mu_interval_diff(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
set.seed(4711)
p0 <- rbeta(100000, 40, 636) #placebo
p1 <- rbeta(100000, 23, 659) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.9)
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
set.seed(4711)
p0 <- rbeta(100000, 40, 636) #placebo
p1 <- rbeta(100000, 23, 659) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.9)
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
set.seed(4711)
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 658) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.9)
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
set.seed(4711)
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 658) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
#Alternative priors
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 667) #treatment
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
alternative_prior_odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 667) #treatment
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(BEST)
data("windshieldy1")
# helper functions to sample from and evaluate
# scaled inverse chi-squared distribution
rsinvchisq <- function(n, nu, s2, ...) nu*s2 / rchisq(n , nu, ...)
dsinvchisq <- function(x, nu, s2){
exp(log(nu/2)*nu/2 - lgamma(nu/2) + log(s2)/2*nu - log(x)*(nu/2+1) - (nu*s2/2)/x)
}
mu_point_est <- function(data) {
n <- length(data)
s2 <- var(data)
my <- mean(data)
ns <- 100000
sigma2  <- rsinvchisq(ns, n-1, s2)
mu <- my + sqrt(sigma2/n)*rnorm(length(sigma2))
return(mean(mu))
}
mu_point_est(data = windshieldy1)
mu_interval <- function(data, prob) {
n <- length(data)
s2 <- var(data)
my <- mean(data)
ns <- 100000
sigma2  <- rsinvchisq(ns, n-1, s2)
mu <- my + sqrt(sigma2/n)*rnorm(length(sigma2))
return(unname(quantile(mu, probs = c((1-prob)/2, (1+prob)/2) )))
}
mu_interval(data = windshieldy1, prob = 0.95)
n <- length(windshieldy1)
s2 <- var(windshieldy1)
my <- mean(windshieldy1)
scaled <- s2 / n
x_range =  seq(from = 10, to=20, by = 0.01)
dt_dens = dtnew(x=x_range, df=(n-1), mean=my, scale=scaled)
plot(x_range, dt_dens, type="l")
set.seed(4711)
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 658) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
#Alternative priors
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 667) #treatment
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
data("windshieldy1")
data("windshieldy2")
DiffMeans <- BESTmcmc(windshieldy1, windshieldy2, priors=NULL, parallel=FALSE)
plot(DiffMeans)
#For comparison purposes
mu_point_diff_est <- function(data1, data2) {
n_1 <- length(data1)
s2_1 <- var(data1)
my_1 <- mean(data1)
ns <- 100000
sigma2_1  <- rsinvchisq(ns, n_1-1, s2_1)
mu_1 <- my_1 + sqrt(sigma2_1/n_1)*rnorm(length(sigma2_1))
n_2 <- length(data2)
s2_2 <- var(data2)
my_2 <- mean(data2)
sigma2_2  <- rsinvchisq(ns, n_2-1, s2_2)
mu_2 <- my_2 + sqrt(sigma2_2/n_2)*rnorm(length(sigma2_2))
return(mean(mu_1-mu_2))
}
mu_point_diff_est(data1 = windshieldy1, data2 = windshieldy2)
mu_interval_diff <- function(data1, data2, prob) {
n_1 <- length(data1)
s2_1 <- var(data1)
my_1 <- mean(data1)
ns <- 100000
sigma2_1  <- rsinvchisq(ns, n_1-1, s2_1)
mu_1 <- my_1 + sqrt(sigma2_1/n_1)*rnorm(length(sigma2_1))
n_2 <- length(data2)
s2_2 <- var(data2)
my_2 <- mean(data2)
sigma2_2  <- rsinvchisq(ns, n_2-1, s2_2)
mu_2 <- my_2 + sqrt(sigma2_2/n_2)*rnorm(length(sigma2_2))
return(unname(quantile((mu_1-mu_2), probs = c((1-prob)/2, (1+prob)/2) )))
}
mu_interval_diff(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(BEST)
data("windshieldy1")
set.seed(4711)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(BEST)
data("windshieldy1")
set.seed(4711)
# helper functions to sample from and evaluate
# scaled inverse chi-squared distribution
rsinvchisq <- function(n, nu, s2, ...) nu*s2 / rchisq(n , nu, ...)
dsinvchisq <- function(x, nu, s2){
exp(log(nu/2)*nu/2 - lgamma(nu/2) + log(s2)/2*nu - log(x)*(nu/2+1) - (nu*s2/2)/x)
}
mu_point_est <- function(data) {
n <- length(data)
s2 <- var(data)
my <- mean(data)
ns <- 100000
sigma2  <- rsinvchisq(ns, n-1, s2)
mu <- my + sqrt(sigma2/n)*rnorm(length(sigma2))
return(mean(mu))
}
mu_point_est(data = windshieldy1)
mu_interval <- function(data, prob) {
n <- length(data)
s2 <- var(data)
my <- mean(data)
ns <- 100000
sigma2  <- rsinvchisq(ns, n-1, s2)
mu <- my + sqrt(sigma2/n)*rnorm(length(sigma2))
return(unname(quantile(mu, probs = c((1-prob)/2, (1+prob)/2) )))
}
mu_interval(data = windshieldy1, prob = 0.95)
n <- length(windshieldy1)
s2 <- var(windshieldy1)
my <- mean(windshieldy1)
scaled <- s2 / n
x_range =  seq(from = 10, to=20, by = 0.01)
dt_dens = dtnew(x=x_range, df=(n-1), mean=my, scale=scaled)
plot(x_range, dt_dens, type="l")
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 658) #treatment
posterior_odds_ratio_point_est <- function(p0, p1) {
return (mean((p1/(1-p1))/(p0/(1-p0))))
}
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval <- function(p0, p1, prob) {
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
odds_ratio_interval = quantile(odds_ratio, probs = c((1-prob)/2, (1+prob)/2) )
return(unname(odds_ratio_interval))
}
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
odds_ratio = (p1/(1-p1)) / (p0/(1-p0))
hist(odds_ratio)
#Alternative priors
p0 <- rbeta(100000, 40, 635) #placebo
p1 <- rbeta(100000, 23, 667) #treatment
posterior_odds_ratio_point_est(p0, p1)
posterior_odds_ratio_interval(p0, p1, prob = 0.95)
data("windshieldy1")
data("windshieldy2")
DiffMeans <- BESTmcmc(windshieldy1, windshieldy2, priors=NULL, parallel=FALSE)
plot(DiffMeans)
#For comparison purposes
mu_point_diff_est <- function(data1, data2) {
n_1 <- length(data1)
s2_1 <- var(data1)
my_1 <- mean(data1)
ns <- 100000
sigma2_1  <- rsinvchisq(ns, n_1-1, s2_1)
mu_1 <- my_1 + sqrt(sigma2_1/n_1)*rnorm(length(sigma2_1))
n_2 <- length(data2)
s2_2 <- var(data2)
my_2 <- mean(data2)
sigma2_2  <- rsinvchisq(ns, n_2-1, s2_2)
mu_2 <- my_2 + sqrt(sigma2_2/n_2)*rnorm(length(sigma2_2))
return(mean(mu_1-mu_2))
}
mu_point_diff_est(data1 = windshieldy1, data2 = windshieldy2)
mu_interval_diff <- function(data1, data2, prob) {
n_1 <- length(data1)
s2_1 <- var(data1)
my_1 <- mean(data1)
ns <- 100000
sigma2_1  <- rsinvchisq(ns, n_1-1, s2_1)
mu_1 <- my_1 + sqrt(sigma2_1/n_1)*rnorm(length(sigma2_1))
n_2 <- length(data2)
s2_2 <- var(data2)
my_2 <- mean(data2)
sigma2_2  <- rsinvchisq(ns, n_2-1, s2_2)
mu_2 <- my_2 + sqrt(sigma2_2/n_2)*rnorm(length(sigma2_2))
return(unname(quantile((mu_1-mu_2), probs = c((1-prob)/2, (1+prob)/2) )))
}
mu_interval_diff(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
library(dplyr)
dat = read.csv("bts-data-alarm-2017.csv", header = TRUE)
agg <- aggregate(datapoint_id ~ station_id, data = dat, FUN = unique)
datapoint_id <- unlist(lapply(Reduce("+", agg['datapoint_id']), length))
mean(datapoint_id)
hist(datapoint_id, breaks =12, xlab ="datapoint_id count")
View(agg)
agg
agg['station_id']
cat(agg['station_id'])
unlist(agg['station_id'])
View(dat)
knitr::opts_chunk$set(echo = TRUE)
length(unique(data['datapoint_id']))
length(unique(data.datapoint_id))
length(unique(dat.datapoint_id))
length(unique(dat$datapoint_id))
length(unique(dat$station_id))
length(unique(dat$datapoint_id))
library(dplyr)
dat = read.csv("bts-data-alarm-2017.csv", header = TRUE)
agg <- aggregate(datapoint_id ~ station_id, data = dat, FUN = unique)
datapoint_id <- unlist(lapply(Reduce("+", agg['datapoint_id']), length))
mean(datapoint_id)
hist(datapoint_id, breaks =12, xlab ="datapoint_id count")
length(unique(dat$station_id))
length(unique(dat$datapoint_id))
126*20
library(markmyassignment)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(reshape2)
library(rstan)
options(mc.cores = parallel::detectCores())
set.seed(333)
data("bioassay")
#x = doses
#n = test subjects
#y = deaths
mu_a=0
mu_b=10
sigma_a=2 #standard deviation
sigma_b=10 #standard deviation
cor=0.5
mean = c(mu_a,mu_b)
#Algebraic manipulation
covariance_matrix = matrix(c(sigma_a^2,cor*sigma_a*sigma_b,cor*sigma_a*sigma_b,sigma_b^2),
nrow = 2, ncol = 2 )
mean
covariance_matrix
#data {
#  int<lower=0> total;
#  int<lower=0> deaths[total];
#  int<lower=0> numb_of_animals[total];
#  vector[total] doses;
#  vector[2] mu;
#  cov_matrix[2] cov_m;
#  }
#parameters {
#  vector[2] alpha_beta;
#}
#model {
#  alpha_beta ~ multi_normal(mu, cov_m);
#  deaths ~ binomial_logit(numb_of_animals, alpha_beta[1] + alpha_beta[2] * doses);
#}
#data {
#  int<lower=0> N; //number of data point
#  vector[N] deaths;
#  vector[N] numb_of_animals;
#  vector[N] doses;
#  vector[2] mu;
#  cov_matrix[2,2] cov_m;
#  }
#parameters {
#  vector[2] theta;
#}
#model {
#  alpha_beta ~ multi_normal(mu, cov_m);
#  deaths ~ binomial_logit(numb_of_animals, theta[1] + theta[2] * doses);
#}
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
data("bioassay")
#x = doses
#n = test subjects
#y = deaths
mu_a=0
mu_b=10
sigma_a=2 #standard deviation
sigma_b=10 #standard deviation
cor=0.5
mean = c(mu_a,mu_b)
#Algebraic manipulation
covariance_matrix = matrix(c(sigma_a^2,cor*sigma_a*sigma_b,cor*sigma_a*sigma_b,sigma_b^2),
nrow = 2, ncol = 2 )
mean
covariance_matrix
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
data_list = list(
N = length(bioassay$n),
deaths = bioassay$y,
numb_of_animals = bioassay$n,
doses = bioassay$x,
mu = mean,
cov_m = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
print(bioassay_fit)
data_list = list(
N = length(bioassay$n),
doses = bioassay$x,
subjects = bioassay$n,
deaths = bioassay$y,
mu = mean,
cov_mat = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
print(bioassay_fit)
data_out <- extract(bioassay_fit, permuted = TRUE)
theta_out <- data_out$alpha_beta
random_theta <- as.data.frame(theta_out[sample(nrow(theta_out),size=5000,replace=FALSE),])
data_out <- extract(bioassay_fit, permuted = TRUE)
theta_out <- data_out$theta
random_theta <- as.data.frame(theta_out[sample(nrow(theta_out),size=5000,replace=FALSE),])
colnames(random_theta) <- c("Alpha", "Beta")
ggplot(random_theta, aes(x=Alpha, y=Beta)) + geom_point(color="darkblue")
data_list = list(
N = length(bioassay$n),
doses = bioassay$x,
subjects = bioassay$n,
deaths = bioassay$y,
mu = mean,
cov_mat = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
print(bioassay_fit)
data_list = list(
N = length(bioassay$n),
doses = bioassay$x,
subjects = bioassay$n,
deaths = bioassay$y,
mu = mean,
cov_mat = covariance_matrix
)
bioassay_fit <- stan(file = 'bioassay.stan', data = data_list, iter=10000, warmup=1000, chains=50)
print(bioassay_fit)
suppressWarnings
library(markmyassignment)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(reshape2)
library(rstan)
options(mc.cores = parallel::detectCores())
set.seed(333)
suppressWarnings
suppressMessages
library(markmyassignment)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(reshape2)
library(rstan)
options(mc.cores = parallel::detectCores())
set.seed(333)
library(markmyassignment)
library(aaltobda)
library(ggplot2)
library(tidyr)
library(grid)
library(gridExtra)
library(reshape2)
library(rstan)
suppressWarnings
suppressMessages
options(mc.cores = parallel::detectCores())
set.seed(333)
setwd("C:/Users/Simo/Projects/Course/Bayes/Bayesian-data-analysis-project")
kickstarter = read.csv("ks-projects-201801.csv", header = TRUE)
kickstarter = read.csv("data/ks-projects-201801.csv", header = TRUE)
head(kickstarter)
View(mu_point_diff_est)
View(kickstarter)
